@page "/"

@inject Game game

<PageTitle>Wordler</PageTitle>
<div class="game-container">
	<div class="control-box-container">
		<text>Round: @(game.Round)</text>
		<text>Remaining words: @(game.GetRemainingWords())</text>

		<h3 class="control-area-header">Suggestions:</h3>
		<Suggestions RoundNumber=@game.Round SelectSuggestedWord=@SelectSuggestedWord />

		<Spacer Height=35 />

		<h3 class="control-area-header">Guess Word:</h3>
		<input type="text" maxlength="5" class="guess-word-input" @bind-value=@inputValue @bind-value:event="oninput" @bind-value:after=@UpdateLetters />

		<Spacer Height=35 />

		<h3 class="control-area-header">Results:</h3>
		<div class="toggle-tiles-container">
			<ToggleTile TileIndex=1 Letter=@(GetLetter(1)) RoundNumber=@game.Round UpdateTileColor=@UpdateTileColor />
			<ToggleTile TileIndex=2 Letter=@(GetLetter(2)) RoundNumber=@game.Round UpdateTileColor=@UpdateTileColor />
			<ToggleTile TileIndex=3 Letter=@(GetLetter(3)) RoundNumber=@game.Round UpdateTileColor=@UpdateTileColor />
			<ToggleTile TileIndex=4 Letter=@(GetLetter(4)) RoundNumber=@game.Round UpdateTileColor=@UpdateTileColor />
			<ToggleTile TileIndex=5 Letter=@(GetLetter(5)) RoundNumber=@game.Round UpdateTileColor=@UpdateTileColor />
		</div>

		<Spacer Height=35 />

		<div class="submit-btn-container">
			<button class="secondary-btn" @onclick=@StartOver>Start Over</button>
			<button class="submit-btn" @onclick=@SubmitWord>Submit</button>
		</div>
	</div>

	<div class="board-container">
		<div class="board">
			@foreach (BoardRow row in game.GetRows())
			{
				<div class="board-row">
					@foreach (BoardTile tile in row.Tiles)
					{
						switch (tile.Color)
						{
							case TileColor.Green:
								<div class="board-tile green-tile">@char.ToUpper(tile.Letter)</div>
								break;
							case TileColor.Yellow:
								<div class="board-tile yellow-tile">@char.ToUpper(tile.Letter)</div>
								break;
							default:
								<div class="board-tile grey-tile">@char.ToUpper(tile.Letter)</div>
								break;
						}
					}
					
				</div>
			}
			@for (int i = 0; i < 6 - game.GetRows().Count; i++)
			{
				<div class="board-row">
					<div class="board-tile outline-tile"></div>
					<div class="board-tile outline-tile"></div>
					<div class="board-tile outline-tile"></div>
					<div class="board-tile outline-tile"></div>
					<div class="board-tile outline-tile"></div>
				</div>
			}
		</div>
	</div>
</div>

@code{
	private string? inputValue;

	private void SelectSuggestedWord(string word)
	{
		inputValue = word;
	}

	private TileColor _tile1Color = TileColor.Grey;
	private TileColor _tile2Color = TileColor.Grey;
	private TileColor _tile3Color = TileColor.Grey;
	private TileColor _tile4Color = TileColor.Grey;
	private TileColor _tile5Color = TileColor.Grey;

	private void UpdateTileColor(TileColorAlloy alloy)
	{
		switch (alloy.TileIndex)
		{
			case 1:
				_tile1Color = alloy.Color;
				break;
			case 2:
				_tile2Color = alloy.Color;
				break;
			case 3:
				_tile3Color = alloy.Color;
				break;
			case 4:
				_tile4Color = alloy.Color;
				break;
			default:
				_tile5Color = alloy.Color;
				break;
		}
	}

	private void UpdateLetters()
	{
		StateHasChanged();
	}

	private string GetLetter(int tileIndex)
	{
		try
		{
			return inputValue.Substring(tileIndex-1, 1);
		}
		catch(Exception)
		{
			return "";
		}

	}

	private void StartOver()
	{
		inputValue = null;

		game.ResetGame();
	}

	private void SubmitWord()
	{
		List<TileColor> guessWordColors = new List<TileColor>()
		{
			_tile1Color,
			_tile2Color,
			_tile3Color,
			_tile4Color,
			_tile5Color
		};

		if (inputValue is not null && inputValue.Length == 5)
		{
			game.SubmitWord(inputValue, guessWordColors);

			inputValue = null;

			StateHasChanged();
		}
		else
		{
			// FIXME: throw error message
		}
	}

}